// <auto-generated />
using System;
using GymApp.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymApp.Persistence.Migrations
{
    [DbContext(typeof(GymDatabaseContext))]
    [Migration("20231125195705_ChangedDefaultPicture")]
    partial class ChangedDefaultPicture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClassUsersProfile", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ClassUsersProfile");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonalTrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonalTrainerId");

                    b.ToTable("Class");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ClassName = "Żelazne barki",
                            DayOfWeek = 0,
                            EndTime = new DateTime(2023, 6, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 20,
                            PersonalTrainerId = new Guid("00000000-2199-8437-0000-000000000001"),
                            StartTime = new DateTime(2023, 6, 15, 21, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ClassName = "Klatka piersiowa",
                            DayOfWeek = 1,
                            EndTime = new DateTime(2023, 6, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 20,
                            PersonalTrainerId = new Guid("00000000-2199-8437-0000-000000000001"),
                            StartTime = new DateTime(2023, 6, 15, 11, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ClassName = "Brzuch jak kaloryfer",
                            DayOfWeek = 0,
                            EndTime = new DateTime(2023, 6, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 20,
                            PersonalTrainerId = new Guid("12340008-2199-8437-0000-000000003331"),
                            StartTime = new DateTime(2023, 6, 15, 13, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ClassName = "Brazylijskie pośladki",
                            DayOfWeek = 3,
                            EndTime = new DateTime(2023, 6, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 20,
                            PersonalTrainerId = new Guid("12340008-2199-8437-0000-000000003331"),
                            StartTime = new DateTime(2023, 6, 15, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ClassName = "Zumba fitness",
                            DayOfWeek = 4,
                            EndTime = new DateTime(2023, 6, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 15,
                            PersonalTrainerId = new Guid("33300000-2137-8437-0000-045600000001"),
                            StartTime = new DateTime(2023, 6, 15, 16, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ClassName = "Crossfit",
                            DayOfWeek = 2,
                            EndTime = new DateTime(2023, 6, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxUsers = 10,
                            PersonalTrainerId = new Guid("33300000-2137-8437-0000-045600000001"),
                            StartTime = new DateTime(2023, 6, 15, 18, 15, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("GymApp.Domain.Entities.GymEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnteredOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GymPassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GymPassId");

                    b.ToTable("GymEntries");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.GymPass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTill")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("GymPasses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ProfileId = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartedOn = new DateTime(2023, 11, 25, 20, 57, 5, 8, DateTimeKind.Local).AddTicks(4416),
                            ValidTill = new DateTime(2023, 11, 25, 20, 57, 5, 8, DateTimeKind.Local).AddTicks(4385)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ProfileId = new Guid("00000000-0000-0000-0000-000000000002"),
                            StartedOn = new DateTime(2023, 11, 25, 20, 57, 5, 8, DateTimeKind.Local).AddTicks(4420),
                            ValidTill = new DateTime(2023, 11, 25, 20, 57, 5, 8, DateTimeKind.Local).AddTicks(4419)
                        });
                });

            modelBuilder.Entity("GymApp.Domain.Entities.GymPassPrice", b =>
                {
                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Length");

                    b.ToTable("GymPassPrices");

                    b.HasData(
                        new
                        {
                            Length = 0,
                            Price = 99m
                        },
                        new
                        {
                            Length = 1,
                            Price = 250m
                        },
                        new
                        {
                            Length = 2,
                            Price = 450m
                        },
                        new
                        {
                            Length = 3,
                            Price = 850m
                        });
                });

            modelBuilder.Entity("GymApp.Domain.Entities.PersonalTrainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PersonalTrainers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-2199-8437-0000-000000000001"),
                            Email = "l.karasek@gmail.com",
                            Name = "Łukasz",
                            PhoneNumber = "533222111",
                            Surname = "Karasek"
                        },
                        new
                        {
                            Id = new Guid("12340008-2199-8437-0000-000000003331"),
                            Email = "m.koltuniuk@gmail.com",
                            Name = "Mateusz",
                            PhoneNumber = "666222111",
                            Surname = "Kołtuniuk"
                        },
                        new
                        {
                            Id = new Guid("33300000-2137-8437-0000-045600000001"),
                            Email = "k.konczyński@gmail.com",
                            Name = "Kamil",
                            PhoneNumber = "533444111",
                            Surname = "Kończyński"
                        });
                });

            modelBuilder.Entity("GymApp.Domain.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProfilePictures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Picture = new byte[] { 137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 100, 0, 0, 0, 100, 8, 2, 0, 0, 0, 255, 128, 2, 3, 0, 0, 1, 83, 105, 67, 67, 80, 105, 99, 109, 0, 0, 24, 149, 99, 96, 96, 60, 145, 147, 156, 91, 204, 36, 192, 192, 144, 155, 87, 82, 20, 228, 238, 164, 16, 17, 25, 165, 192, 254, 136, 129, 153, 65, 132, 129, 147, 129, 143, 65, 54, 49, 185, 184, 192, 55, 216, 45, 132, 129, 129, 129, 161, 56, 177, 188, 56, 185, 164, 40, 135, 1, 5, 124, 187, 198, 192, 8, 162, 47, 235, 102, 36, 230, 165, 204, 157, 200, 96, 235, 208, 176, 193, 214, 161, 68, 167, 113, 222, 82, 165, 62, 6, 252, 128, 51, 37, 181, 56, 153, 129, 129, 225, 3, 3, 3, 67, 124, 114, 65, 81, 9, 3, 3, 35, 15, 3, 3, 3, 79, 121, 73, 1, 136, 45, 193, 192, 192, 32, 82, 20, 17, 25, 197, 192, 192, 168, 3, 98, 167, 67, 216, 14, 32, 118, 18, 132, 29, 2, 86, 19, 18, 228, 204, 192, 192, 152, 193, 192, 192, 144, 144, 142, 196, 78, 66, 98, 67, 237, 2, 1, 214, 210, 32, 119, 39, 100, 135, 148, 164, 86, 148, 128, 104, 103, 103, 3, 6, 80, 24, 64, 68, 63, 135, 128, 253, 198, 40, 118, 18, 33, 150, 191, 128, 129, 193, 226, 19, 3, 3, 115, 63, 66, 44, 105, 26, 3, 195, 246, 78, 6, 6, 137, 91, 8, 49, 149, 5, 12, 12, 252, 173, 12, 12, 219, 142, 36, 151, 22, 149, 65, 173, 209, 98, 96, 96, 168, 97, 248, 193, 56, 135, 169, 148, 185, 153, 229, 36, 155, 31, 135, 16, 151, 4, 79, 18, 223, 23, 193, 243, 34, 223, 36, 178, 100, 244, 20, 156, 85, 214, 104, 102, 233, 213, 25, 191, 182, 220, 108, 127, 205, 45, 220, 215, 44, 164, 44, 70, 60, 69, 54, 167, 173, 52, 172, 174, 183, 67, 103, 146, 217, 156, 213, 203, 123, 54, 221, 222, 55, 243, 212, 241, 235, 169, 79, 202, 63, 254, 252, 255, 31, 0, 71, 131, 100, 229, 145, 151, 71, 249, 0, 0, 6, 97, 73, 68, 65, 84, 120, 156, 237, 156, 89, 119, 218, 56, 20, 128, 37, 111, 216, 96, 182, 36, 36, 64, 210, 38, 211, 254, 255, 255, 211, 105, 86, 2, 33, 44, 102, 49, 224, 93, 203, 60, 48, 231, 76, 206, 36, 173, 17, 248, 202, 164, 199, 223, 51, 220, 43, 62, 91, 178, 172, 43, 129, 7, 195, 87, 84, 176, 27, 74, 222, 13, 248, 76, 20, 178, 4, 40, 100, 9, 80, 200, 18, 160, 144, 37, 64, 33, 75, 128, 66, 150, 0, 133, 44, 1, 10, 89, 2, 20, 178, 4, 40, 100, 9, 80, 200, 18, 160, 144, 37, 64, 33, 75, 128, 66, 150, 0, 133, 44, 1, 10, 89, 2, 20, 178, 4, 40, 100, 9, 160, 229, 221, 0, 132, 16, 226, 156, 199, 113, 226, 5, 190, 239, 7, 81, 28, 19, 66, 56, 71, 170, 170, 232, 186, 110, 153, 102, 165, 108, 89, 166, 169, 170, 106, 222, 205, 204, 91, 86, 146, 36, 243, 165, 235, 204, 230, 126, 16, 48, 198, 16, 66, 24, 227, 183, 31, 224, 156, 35, 132, 12, 93, 111, 212, 107, 103, 167, 39, 118, 165, 242, 191, 15, 200, 4, 231, 85, 221, 33, 132, 78, 156, 233, 104, 226, 36, 73, 178, 251, 239, 175, 85, 237, 203, 78, 187, 106, 219, 192, 173, 251, 152, 124, 100, 185, 171, 117, 175, 63, 8, 194, 104, 143, 187, 4, 35, 124, 222, 58, 189, 236, 118, 52, 233, 29, 83, 118, 55, 228, 156, 191, 142, 39, 47, 175, 35, 206, 249, 126, 253, 137, 35, 62, 158, 58, 235, 141, 247, 253, 175, 107, 203, 52, 179, 111, 226, 175, 145, 250, 52, 228, 156, 247, 250, 47, 131, 225, 235, 118, 36, 58, 4, 63, 8, 126, 220, 222, 109, 60, 63, 163, 166, 237, 132, 60, 89, 156, 243, 222, 224, 101, 226, 56, 89, 5, 76, 18, 242, 243, 254, 193, 247, 131, 172, 2, 166, 34, 79, 214, 104, 50, 157, 76, 51, 51, 181, 133, 16, 114, 251, 240, 152, 36, 73, 182, 97, 127, 133, 36, 89, 235, 205, 6, 232, 73, 18, 197, 241, 99, 239, 249, 240, 126, 189, 11, 50, 100, 81, 202, 30, 123, 125, 184, 223, 179, 92, 173, 157, 217, 28, 40, 248, 91, 100, 200, 26, 77, 38, 97, 20, 129, 166, 232, 15, 95, 19, 66, 64, 83, 200, 144, 149, 36, 100, 52, 153, 66, 103, 33, 132, 140, 225, 179, 128, 203, 114, 102, 51, 74, 41, 116, 22, 132, 208, 196, 153, 17, 2, 155, 8, 86, 22, 231, 124, 34, 101, 52, 217, 222, 92, 75, 215, 5, 77, 1, 43, 203, 243, 253, 8, 120, 180, 122, 139, 51, 95, 128, 198, 135, 148, 133, 241, 210, 93, 1, 198, 127, 135, 231, 251, 4, 114, 152, 135, 148, 197, 209, 122, 189, 1, 140, 255, 14, 74, 169, 31, 132, 112, 241, 1, 101, 81, 70, 161, 103, 12, 239, 241, 125, 31, 110, 193, 11, 80, 22, 33, 68, 206, 115, 240, 45, 65, 8, 120, 121, 96, 101, 49, 41, 111, 33, 111, 137, 147, 24, 46, 56, 100, 55, 164, 12, 46, 248, 175, 147, 82, 4, 118, 133, 64, 167, 14, 178, 111, 171, 127, 83, 126, 198, 49, 43, 151, 202, 130, 130, 49, 220, 69, 2, 148, 165, 170, 42, 146, 174, 75, 83, 85, 4, 150, 21, 80, 150, 174, 105, 10, 150, 93, 196, 53, 74, 6, 92, 112, 192, 31, 163, 105, 154, 174, 201, 46, 136, 148, 77, 11, 110, 225, 12, 80, 150, 162, 40, 150, 37, 181, 250, 130, 49, 46, 151, 45, 184, 248, 128, 178, 56, 231, 245, 90, 13, 46, 254, 123, 52, 77, 3, 45, 142, 193, 142, 41, 245, 90, 85, 230, 51, 177, 94, 181, 65, 183, 68, 192, 202, 50, 75, 37, 187, 92, 6, 77, 241, 150, 179, 211, 83, 208, 202, 5, 248, 211, 234, 226, 188, 5, 157, 98, 139, 101, 154, 85, 187, 2, 154, 2, 92, 86, 179, 81, 151, 83, 100, 239, 182, 47, 160, 187, 60, 184, 44, 140, 241, 85, 183, 3, 157, 165, 82, 182, 78, 154, 13, 232, 44, 50, 38, 141, 205, 70, 173, 89, 175, 195, 197, 199, 24, 95, 127, 185, 146, 240, 36, 145, 51, 195, 198, 215, 95, 175, 116, 93, 7, 138, 222, 109, 95, 216, 21, 216, 209, 106, 139, 164, 215, 17, 67, 215, 191, 223, 92, 43, 74, 246, 233, 154, 245, 122, 167, 125, 145, 121, 216, 15, 145, 247, 238, 86, 171, 218, 223, 174, 191, 100, 219, 89, 106, 182, 253, 237, 230, 171, 34, 107, 42, 39, 245, 221, 237, 164, 217, 68, 8, 63, 246, 158, 41, 203, 96, 93, 176, 81, 171, 125, 187, 185, 150, 185, 49, 87, 246, 139, 238, 73, 179, 97, 24, 250, 195, 211, 115, 24, 133, 135, 172, 165, 180, 207, 91, 87, 221, 14, 68, 191, 254, 13, 249, 236, 41, 37, 132, 12, 134, 163, 233, 108, 38, 58, 225, 230, 156, 91, 166, 249, 245, 234, 178, 81, 151, 250, 214, 185, 37, 183, 221, 202, 8, 33, 207, 243, 135, 227, 241, 210, 93, 49, 198, 82, 199, 50, 206, 185, 89, 42, 93, 156, 183, 90, 167, 39, 121, 237, 137, 207, 83, 214, 150, 32, 12, 23, 75, 119, 233, 186, 126, 16, 190, 47, 157, 97, 140, 13, 67, 175, 217, 118, 179, 217, 168, 217, 176, 239, 201, 169, 228, 47, 107, 11, 231, 156, 16, 18, 199, 73, 156, 36, 148, 18, 206, 145, 162, 40, 154, 174, 149, 116, 93, 215, 13, 85, 61, 138, 99, 51, 185, 157, 176, 216, 246, 59, 206, 57, 165, 140, 208, 109, 65, 150, 82, 74, 57, 103, 24, 43, 8, 115, 132, 17, 163, 44, 226, 9, 101, 76, 85, 85, 77, 85, 85, 85, 221, 142, 232, 114, 54, 69, 190, 71, 174, 44, 140, 57, 99, 81, 28, 7, 65, 232, 249, 190, 239, 7, 97, 28, 17, 66, 25, 165, 191, 47, 199, 98, 140, 21, 69, 209, 52, 181, 100, 24, 150, 105, 86, 42, 149, 178, 101, 153, 37, 67, 85, 85, 153, 226, 36, 117, 195, 36, 33, 235, 205, 102, 233, 186, 235, 141, 23, 39, 201, 225, 191, 16, 99, 172, 105, 90, 165, 108, 53, 235, 245, 90, 181, 90, 130, 172, 83, 252, 151, 20, 84, 22, 161, 212, 117, 87, 206, 108, 190, 246, 60, 150, 197, 68, 244, 67, 48, 198, 101, 203, 58, 59, 105, 54, 27, 117, 195, 0, 180, 6, 37, 43, 8, 194, 177, 227, 204, 231, 11, 34, 113, 111, 136, 162, 40, 245, 90, 181, 125, 222, 2, 58, 60, 150, 189, 44, 207, 247, 135, 163, 241, 210, 93, 229, 53, 12, 35, 132, 236, 74, 185, 219, 110, 103, 94, 1, 200, 82, 86, 24, 134, 131, 215, 209, 124, 177, 204, 42, 224, 129, 216, 118, 229, 75, 183, 99, 219, 118, 86, 194, 178, 145, 69, 41, 27, 79, 39, 195, 209, 4, 110, 96, 218, 155, 179, 211, 147, 171, 110, 199, 200, 98, 53, 45, 3, 89, 158, 231, 63, 245, 251, 158, 196, 3, 71, 162, 232, 186, 126, 243, 229, 178, 217, 56, 116, 221, 249, 32, 89, 156, 243, 137, 51, 235, 191, 12, 143, 240, 134, 122, 207, 69, 171, 117, 117, 217, 81, 15, 88, 168, 216, 127, 82, 202, 24, 123, 30, 188, 76, 156, 217, 222, 17, 36, 51, 158, 78, 253, 32, 248, 126, 115, 109, 24, 123, 118, 201, 61, 53, 83, 74, 239, 30, 158, 62, 145, 169, 45, 235, 205, 230, 199, 237, 93, 184, 239, 190, 211, 125, 100, 17, 74, 111, 239, 31, 151, 43, 169, 123, 220, 179, 34, 140, 162, 191, 239, 238, 131, 112, 159, 29, 224, 194, 178, 24, 99, 247, 143, 79, 171, 141, 212, 13, 238, 217, 18, 197, 241, 207, 251, 135, 40, 22, 222, 170, 43, 38, 139, 115, 222, 235, 15, 220, 213, 90, 52, 205, 177, 17, 69, 241, 221, 195, 147, 232, 206, 115, 49, 89, 19, 103, 54, 149, 117, 112, 9, 26, 207, 247, 123, 253, 129, 208, 87, 4, 100, 249, 65, 208, 127, 25, 138, 183, 234, 120, 113, 22, 11, 103, 46, 112, 237, 119, 149, 181, 237, 128, 159, 98, 62, 37, 0, 71, 253, 193, 112, 247, 243, 232, 187, 202, 154, 205, 23, 235, 141, 119, 64, 187, 142, 148, 132, 144, 151, 215, 209, 142, 31, 222, 73, 22, 99, 108, 56, 26, 31, 214, 170, 227, 197, 153, 47, 194, 221, 102, 18, 59, 201, 90, 44, 93, 249, 231, 187, 164, 193, 24, 27, 79, 157, 93, 22, 115, 118, 146, 149, 225, 223, 124, 28, 39, 243, 229, 114, 151, 145, 43, 93, 86, 24, 69, 199, 188, 162, 144, 9, 73, 66, 86, 59, 156, 35, 77, 145, 133, 49, 94, 173, 215, 127, 218, 67, 240, 35, 150, 174, 155, 218, 19, 211, 239, 172, 93, 148, 255, 1, 108, 60, 159, 178, 148, 9, 125, 138, 44, 198, 88, 0, 121, 234, 248, 120, 136, 147, 36, 73, 82, 14, 163, 167, 200, 162, 148, 38, 68, 210, 127, 8, 229, 11, 99, 44, 117, 140, 79, 89, 252, 227, 8, 53, 106, 53, 249, 167, 119, 115, 33, 117, 204, 74, 95, 86, 206, 241, 223, 27, 37, 147, 90, 187, 75, 95, 86, 206, 177, 252, 119, 108, 28, 197, 86, 158, 207, 66, 33, 75, 128, 66, 150, 0, 133, 44, 1, 10, 89, 2, 20, 178, 4, 40, 100, 9, 240, 15, 38, 108, 21, 132, 88, 8, 188, 202, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130 }
                        });
                });

            modelBuilder.Entity("GymApp.Domain.Entities.TrainingGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("TrainingGoals");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.UsersProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GymPassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            GymPassId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ProfileDescription = "",
                            ProfilePictureId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UsersId = "753caff9-598a-42d9-aa00-bfa3be83096a"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            GymPassId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ProfileDescription = "",
                            ProfilePictureId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UsersId = "4a60b6be-42d4-4676-86ef-bbfe129011da"
                        });
                });

            modelBuilder.Entity("ClassUsersProfile", b =>
                {
                    b.HasOne("GymApp.Domain.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymApp.Domain.Entities.UsersProfile", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymApp.Domain.Entities.Class", b =>
                {
                    b.HasOne("GymApp.Domain.Entities.PersonalTrainer", "PersonalTrainer")
                        .WithMany("Classes")
                        .HasForeignKey("PersonalTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalTrainer");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.GymEntry", b =>
                {
                    b.HasOne("GymApp.Domain.Entities.GymPass", "Pass")
                        .WithMany()
                        .HasForeignKey("GymPassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pass");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.GymPass", b =>
                {
                    b.HasOne("GymApp.Domain.Entities.UsersProfile", "Profile")
                        .WithOne("Pass")
                        .HasForeignKey("GymApp.Domain.Entities.GymPass", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.TrainingGoal", b =>
                {
                    b.HasOne("GymApp.Domain.Entities.UsersProfile", "Profile")
                        .WithMany("TrainingGoals")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.PersonalTrainer", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("GymApp.Domain.Entities.UsersProfile", b =>
                {
                    b.Navigation("Pass")
                        .IsRequired();

                    b.Navigation("TrainingGoals");
                });
#pragma warning restore 612, 618
        }
    }
}
